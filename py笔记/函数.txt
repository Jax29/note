函数：
1.函数调用：
	要调用一个函数，需要知道函数的名称和参数
	函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”
2.定义函数：
def my_abs(x):
    if x >= 0:
        return x
    else:
        return -x
空函数：
def nop():
    pass    #占位符
3.函数的参数：
	位置参数：
	默认参数：def power(x, n=2):
		必选参数在前，默认参数在后
		默认参数必须指向不变对象！
	可变参数：可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple
		def calc(*numbers):
		Python允许你在list或tuple前面加一个*号，把list或tuple的元素变成可变参数传进去
	关键字参数：关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。
		def person(name, age, **kw):
    			print('name:', name, 'age:', age, 'other:', kw)
		函数person除了必选参数name和age外，还接受关键字参数kw。在调用该函数时，可以只传入必选参数，
		也可以传入任意个数的关键字参数。
		关键字参数可以扩展函数的功能
	命名关键字参数：对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数，
		如果要限制关键字参数的名字，就可以用命名关键字参数
		例如，只接收city和job作为关键字参数。这种方式定义的函数如下：
		def person(name, age, *, city, job):
    			print(name, age, city, job)
		如果函数定义中已经有了一个可变参数，后面跟着的命名关键字参数就不再需要一个特殊分隔符*了
		def person(name, age, *args, city, job):
    			print(name, age, args, city, job)
		命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错
		或者使用默认值来简化：def person(name, age, *, city='Beijing', job):
		 person('Jack', 24, job='Engineer')
4.参数组合：参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数
5.递归函数：如果一个函数在内部调用自身本身，这个函数就是递归函数
	递归函数的优点是定义简单，逻辑清晰
	使用递归函数需要注意防止栈溢出














