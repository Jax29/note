1.切片：
	L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素
	如果第一个索引是0，还可以省略：
	>>> L[:3]
	记住倒数第一个元素的索引是-1
	每两个元素取一个  >>> L[:10:2]
2.迭代：如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）
	在Python中，迭代是通过for ... in来完成的
	list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，
             比如dict就可以迭代：
 	>>> d = {'a': 1, 'b': 2, 'c': 3}
	>>> for key in d:
	                print(key)
	默认情况下，dict迭代的是key。如果要迭代value，可以用for value in d.values()，
             如果要同时迭代key和value，可以用for k, v in d.items()
	判断一个对象是可迭代对象的方法是通过collections模块的Iterable类型判断：
   	>>> from collections import Iterable
	>>> isinstance('abc', Iterable) # str是否可迭代
	        True
3.列表生成式：List Comprehensions
	>>> [x * x for x in range(1, 11)]
	[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
	for循环后面还可以加上if判断：
	>>> [x * x for x in range(1, 11) if x % 2 == 0]

	 [x if x % 2 == 0 else -x for x in range(1, 11)]
	上述for前面的表达式x if x % 2 == 0 else -x才能根据x计算出确定的结果
 	在一个列表生成式中，for前面的if ... else是表达式，而for后面的if是过滤条件，不能带else
	L2 = [s.lower() for s in L1 if isinstance(s,str)]   #练习
4.生成器：在Python中，这种一边循环一边计算的机制，称为生成器：generator
	创建一个generator：
	第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
		>>> g = (x * x for x in range(10))
		>>> g
		<generator object <genexpr> at 0x1022ef630>
		如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值
		上面这种不断调用next(g)实在是太变态了，正确的方法是使用for循环，因为generator也是可迭代对象：
		>>> for n in g:
		...     print(n)
	定义generator的另一种方法。如果一个函数定义中包含yield关键字，那么这个函数就不再是一个普通函数，而是一个generator
5.迭代器：可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。
	生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
	把list、dict、str等Iterable变成Iterator可以使用iter()函数：
	>>> isinstance(iter([]), Iterator)
	True











