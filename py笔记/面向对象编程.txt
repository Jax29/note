面向对象编程：
	面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。
	OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。
1.类和实例;
	定义类是通过class关键字：
	class Student(object):
  	  def __init__(self, name, score):           #在创建实例的时候，就把name，score等属性绑上去
        	        self.name = name
    	        self.score = score
	类名通常是大写开头的单词, 紧接着是(object)，表示该类是从哪个类继承下来的。
	注意到__init__方法的第一个参数永远是self，表示创建的实例本身，因此，在__init__方法内部，
	就可以把各种属性绑定到self，因为self就指向创建的实例本身。
	和普通的函数相比，在类中定义的函数只有一点不同，就是第一个参数永远是实例变量self。
2.访问限制：如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，
	就变成了一个私有变量（private），只有内部可以访问，外部不能访问。
	def __init__(self, name, score):
        	   self.__name = name
       	   self.__score = score
3.继承和多态：
	“鸭子类型”：动态语言的“鸭子类型”，它并不要求严格的继承体系，一个对象只要“看起来像鸭子，走起路来像鸭子”，那它就可以被看做是鸭子。
4.获取对象信息：
	type():判断对象类型
	isinstance()：总是优先使用isinstance()判断类型，可以将指定类型及其子类“一网打尽”。
	dir()：如果要获得一个对象的所有属性和方法，可以使用dir()函数
	仅仅把属性和方法列出来是不够的，配合getattr()、setattr()以及hasattr()，我们可以直接操作一个对象的状态
5.实例属性和类属性：
	实例属性属于各个实例所有，互不干扰；
	类属性属于类所有，所有实例共享一个属性；
	不要对实例属性和类属性使用相同的名字，否则将产生难以发现的错误。



