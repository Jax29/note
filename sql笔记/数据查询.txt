1.基本查询：
	SELECT * FROM <表名>: 查询一个表的所有行和所有列的数据。
	查询的结果是一个二维表。
2.条件查询：
	SELECT语句可以通过WHERE条件来设定查询条件，查询结果是满足查询条件的记录。
	NOT、AND、OR的优先级：NOT>AND>OR，加上括号可以改变优先级。
	SELECT * FROM students WHERE (score < 80 OR score > 90) AND gender = 'M';
3.投影查询：
	用SELECT 列1, 列2, 列3 FROM ...，让结果集仅包含指定列。这种操作称为投影查询。
	使用SELECT 列1, 列2, 列3 FROM ...时，还可以给每一列起个别名，这样，结果集的列名就可以与原表的列名不同。
          它的语法是SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM ...
4.排序：
	使用SELECT查询时，查询结果集通常是按照id排序的，也就是根据主键排序。这也是大部分数据库的做法。
	如果我们要根据其他条件排序怎么办？可以加上ORDER BY子句。例如按照成绩从低到高进行排序：
	ELECT id, name, gender, score FROM students ORDER BY score  DESC；加上DESC表示“倒序”。
	如果有WHERE子句，那么ORDER BY子句要放到WHERE子句后面。
5.分页查询：
	通过LIMIT <M> OFFSET <N>子句实现：
	SELECT id, name, gender, score
	FROM students
	ORDER BY score DESC
	LIMIT 3 OFFSET 0;
6.聚合查询：
	对于统计总数、平均数这类计算，SQL提供了专门的聚合函数，使用聚合函数进行查询。
	COUNT(*)表示查询所有列的行数，要注意聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表，
          	只是这个二维表只有一行一列，并且列名是COUNT(*)：
	SELECT COUNT(*) num FROM students;
	除了COUNT()函数外，SQL还提供了如下聚合函数：

	函数	说明
	SUM	计算某一列的合计值，该列必须为数值类型
	AVG	计算某一列的平均值，该列必须为数值类型
	MAX	计算某一列的最大值
	MIN	计算某一列的最小值

	分组：GROUP BY子句
	SELECT class_id,AVG(score) average FROM students GROUP BY class_id;
	SELECT class_id,AVG(score) average,gender  FROM students GROUP BY class_id,gender;
7.多表查询（笛卡尔查询）：SELECT * FROM <表1> <表2>

	SELECT * FROM students, classes;
	这种一次查询两个表的数据，查询的结果也是一个二维表，它是students表和classes表的“乘积”，即students表的
	每一行与classes表的每一行都两两拼在一起返回。结果集的列数是students表和classes表的列数之和，
	行数是students表和classes表的行数之积。

	上述查询的结果集有两列id和两列name，两列id是因为其中一列是students表的id，而另一列是classes表的id，
	但是在结果集中，不好区分。两列name同理。
	要解决这个问题，我们仍然可以利用投影查询的“设置列的别名”来给两个表各自的id和name列起别名：
	SELECT
   	 students.id sid,
	 students.name,
   	 students.gender,
   	 students.score,
   	 classes.id cid,
  	 classes.name cname
	 FROM students, classes;
   
	表名设置别名：
	SELECT
	    s.id sid,
	    s.name,
	    s.gender,
	    s.score,
	    c.id cid,
	    c.name cname
	FROM students s, classes c
	WHERE s.gender = 'M' AND c.id = 1;
8.连接查询：
	JOIN查询需要先确定主表，然后把另一个表的数据“附加”到结果集上；
 	INNER JOIN是最常用的一种JOIN查询，它的语法是SELECT ... FROM <表1> INNER JOIN <表2> ON <条件...>；
	LEFT OUTER JOIN
	RIGHT OUTER JOIN
	FULL OUTER JOIN

	SELECT s.id, s.name, s.class_id, c.name class_name, s.gender, s.score
	FROM students s
	INNER JOIN classes c
	ON s.class_id = c.id;





















